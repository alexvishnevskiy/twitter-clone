// Code generated by MockGen. DO NOT EDIT.
// Source: follow/internal/controller/controller.go

// Package controller is a generated GoMock package.
package controller

import (
	context "context"
	reflect "reflect"

	types "github.com/alexvishnevskiy/twitter-clone/internal/types"
	gomock "github.com/golang/mock/gomock"
)

// MockfollowRepository is a mock of followRepository interface.
type MockfollowRepository struct {
	ctrl     *gomock.Controller
	recorder *MockfollowRepositoryMockRecorder
}

// MockfollowRepositoryMockRecorder is the mock recorder for MockfollowRepository.
type MockfollowRepositoryMockRecorder struct {
	mock *MockfollowRepository
}

// NewMockfollowRepository creates a new mock instance.
func NewMockfollowRepository(ctrl *gomock.Controller) *MockfollowRepository {
	mock := &MockfollowRepository{ctrl: ctrl}
	mock.recorder = &MockfollowRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockfollowRepository) EXPECT() *MockfollowRepositoryMockRecorder {
	return m.recorder
}

// Follow mocks base method.
func (m *MockfollowRepository) Follow(ctx context.Context, userId, followId types.UserId) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Follow", ctx, userId, followId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Follow indicates an expected call of Follow.
func (mr *MockfollowRepositoryMockRecorder) Follow(ctx, userId, followId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Follow", reflect.TypeOf((*MockfollowRepository)(nil).Follow), ctx, userId, followId)
}

// GetFollowingUser mocks base method.
func (m *MockfollowRepository) GetFollowingUser(ctx context.Context, userId types.UserId) ([]types.UserId, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFollowingUser", ctx, userId)
	ret0, _ := ret[0].([]types.UserId)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFollowingUser indicates an expected call of GetFollowingUser.
func (mr *MockfollowRepositoryMockRecorder) GetFollowingUser(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFollowingUser", reflect.TypeOf((*MockfollowRepository)(nil).GetFollowingUser), ctx, userId)
}

// GetUserFollowers mocks base method.
func (m *MockfollowRepository) GetUserFollowers(ctx context.Context, userId types.UserId) ([]types.UserId, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserFollowers", ctx, userId)
	ret0, _ := ret[0].([]types.UserId)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserFollowers indicates an expected call of GetUserFollowers.
func (mr *MockfollowRepositoryMockRecorder) GetUserFollowers(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserFollowers", reflect.TypeOf((*MockfollowRepository)(nil).GetUserFollowers), ctx, userId)
}

// Unfollow mocks base method.
func (m *MockfollowRepository) Unfollow(ctx context.Context, userId, followId types.UserId) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unfollow", ctx, userId, followId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unfollow indicates an expected call of Unfollow.
func (mr *MockfollowRepositoryMockRecorder) Unfollow(ctx, userId, followId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unfollow", reflect.TypeOf((*MockfollowRepository)(nil).Unfollow), ctx, userId, followId)
}
