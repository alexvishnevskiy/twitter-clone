// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.0
// source: tweets.proto

package tweets

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TweetsService_Retrieve_FullMethodName = "/tweets.TweetsService/Retrieve"
)

// TweetsServiceClient is the client API for TweetsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TweetsServiceClient interface {
	Retrieve(ctx context.Context, in *RetrieveRequest, opts ...grpc.CallOption) (*RetrieveResponse, error)
}

type tweetsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTweetsServiceClient(cc grpc.ClientConnInterface) TweetsServiceClient {
	return &tweetsServiceClient{cc}
}

func (c *tweetsServiceClient) Retrieve(ctx context.Context, in *RetrieveRequest, opts ...grpc.CallOption) (*RetrieveResponse, error) {
	out := new(RetrieveResponse)
	err := c.cc.Invoke(ctx, TweetsService_Retrieve_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TweetsServiceServer is the server API for TweetsService service.
// All implementations must embed UnimplementedTweetsServiceServer
// for forward compatibility
type TweetsServiceServer interface {
	Retrieve(context.Context, *RetrieveRequest) (*RetrieveResponse, error)
	mustEmbedUnimplementedTweetsServiceServer()
}

// UnimplementedTweetsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTweetsServiceServer struct {
}

func (UnimplementedTweetsServiceServer) Retrieve(context.Context, *RetrieveRequest) (*RetrieveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Retrieve not implemented")
}
func (UnimplementedTweetsServiceServer) mustEmbedUnimplementedTweetsServiceServer() {}

// UnsafeTweetsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TweetsServiceServer will
// result in compilation errors.
type UnsafeTweetsServiceServer interface {
	mustEmbedUnimplementedTweetsServiceServer()
}

func RegisterTweetsServiceServer(s grpc.ServiceRegistrar, srv TweetsServiceServer) {
	s.RegisterService(&TweetsService_ServiceDesc, srv)
}

func _TweetsService_Retrieve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TweetsServiceServer).Retrieve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TweetsService_Retrieve_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TweetsServiceServer).Retrieve(ctx, req.(*RetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TweetsService_ServiceDesc is the grpc.ServiceDesc for TweetsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TweetsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tweets.TweetsService",
	HandlerType: (*TweetsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Retrieve",
			Handler:    _TweetsService_Retrieve_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tweets.proto",
}
